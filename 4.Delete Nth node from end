/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {

        ListNode*p=head;
        int c=0;
        while(p!=NULL){
            p=p->next;
            c++;
        }

        p=head;

        int pos=c-n;
        if(pos==0) return head->next;
        for(int i=1;i<pos;i++){
            p=p->next;
        }

        p->next=p->next->next;
        return head;
        
    }
};










/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

Node* removeKthNode(Node* head, int K)
{
    // Write your code here.
    Node* start=new Node();
    start->next=head;
    Node* slow=start;
    Node* fast=start;



    while(K--){
        fast=fast->next;
    }
    while(fast->next){
        fast=fast->next;
        slow=slow->next;
    } 
    slow->next=slow->next->next;
    


    return start->next;
}
